{"version":3,"sources":["Header.js","Note.js","NotesList.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","addNote","type","placeholder","value","searchText","onChange","e","onSearch","target","Note","note","title","updatedValue","editMeId","id","onType","description","removeNote","NotesList","noteElements","notes","filter","doesMatchSearch","map","src_Note","key","App","_Component","Object","inherits","_super","_createSuper","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","state","Date","now","newNotes","toConsumableArray","setState","updatedKey","updatedNotes","text","newSearchText","toLowerCase","titleMatch","includes","descriptionMatch","hasMatch","noteId","createClass","stringifiedNotes","localStorage","getItem","savedNotes","JSON","parse","stringify","setItem","src_Header","src_NotesList","Component","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.e37afbe9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n  const callSearch = (e) => {\n    props.onSearch(e.target.value);\n  };\n\n  return (\n    <header className=\"app-header\">\n      <h1 className=\"app-header__title\">Super Sticky Notes</h1>\n      <aside className=\"app-header__controls\">\n        <button className=\"add-new\" onClick={props.addNote}>\n          + New Note\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"Type here to search...\"\n          className=\"search\"\n          value={props.searchText}\n          onChange={callSearch}\n        />\n      </aside>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Note = (props) => {\n  const updateTitle = (e) => {\n    const updatedValue = e.target.value;\n    const editMeId = props.note.id;\n    props.onType(editMeId, \"title\", updatedValue);\n  };\n  const updateDescription = (e) => {\n    const updatedValue = e.target.value;\n    const editMeId = props.note.id;\n    props.onType(editMeId, \"description\", updatedValue);\n  };\n  const clickDelete = () => props.removeNote(props.note.id);\n  return (\n    <li className=\"note\">\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        className=\"note__title\"\n        value={props.note.title}\n        onChange={updateTitle}\n      />\n      <textarea\n        placeholder=\"Description...\"\n        className=\"note__description\"\n        value={props.note.description}\n        onChange={updateDescription}\n      />\n      <span onClick={clickDelete} className=\"note__delete\">\n        X\n      </span>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from \"react\";\nimport Note from \"./Note\";\n\nconst NotesList = (props) => {\n  const keepSearchMatches = (note) => note.doesMatchSearch;\n  const searchMatches = props.notes.filter(keepSearchMatches);\n\n  const renderNote = (note) => (\n    <Note\n      removeNote={props.removeNote}\n      onType={props.onType}\n      note={note}\n      key={note.id}\n    />\n  );\n  const noteElements = searchMatches.map(renderNote);\n  return <ul className=\"notes-list\">{noteElements}</ul>;\n};\n\nexport default NotesList;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport NotesList from \"./NotesList\";\n\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n  addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    const newNotes = [newNote, ...this.state.notes];\n    this.setState({ notes: newNotes });\n  };\n  onType = (editMeId, updatedKey, updatedValue) => {\n    // editMeId == id of the note that is edited\n    // updatedKey == title or description field\n    // updatedValue == value of title or description\n    const updatedNotes = this.state.notes.map((note) => {\n      if (note.id !== editMeId) {\n        return note;\n      } else {\n        if (updatedKey === \"title\") {\n          note.title = updatedValue;\n          return note;\n        } else {\n          note.description = updatedValue;\n          return note;\n        }\n      }\n    });\n    this.setState({ notes: updatedNotes });\n  };\n\n  onSearch = (text) => {\n    /* toggle the doesMatchSearch boolean value of each sticky\n    note when the user types in the search field.\n    set the doesMatchSearch value to true for a sticky note if\n    it's title or description matches the search string. */\n    const newSearchText = text.toLowerCase();\n    const updatedNotes = this.state.notes.map((note) => {\n      if (!newSearchText) {\n        /* If the search field is empty, then\n      we set the doesMatchSearch value for every note to true. */\n        note.doesMatchSearch = true;\n        return note;\n      } else {\n        const title = note.title.toLowerCase();\n        const description = note.description.toLowerCase();\n        const titleMatch = title.includes(newSearchText);\n        const descriptionMatch = description.includes(newSearchText);\n        const hasMatch = titleMatch || descriptionMatch;\n        note.doesMatchSearch = hasMatch;\n        return note;\n      }\n    });\n    this.setState({\n      searchText: newSearchText,\n      notes: updatedNotes\n    });\n  };\n\n  removeNote = (noteId) => {\n    const updatedNotes = this.state.notes.filter((note) => note.id !== noteId);\n    this.setState({ notes: updatedNotes });\n  };\n\n  componentDidMount() {\n    const stringifiedNotes = localStorage.getItem(\"savedNotes\");\n    if (stringifiedNotes) {\n      const savedNotes = JSON.parse(stringifiedNotes);\n      this.setState({ notes: savedNotes });\n    }\n  }\n\n  componentDidUpdate() {\n    const stringifiedNotes = JSON.stringify(this.state.notes);\n    localStorage.setItem(\"savedNotes\", stringifiedNotes);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          addNote={this.addNote}\n          searchText={this.state.searchText}\n          onSearch={this.onSearch}\n        />\n        <NotesList\n          removeNote={this.removeNote}\n          onType={this.onType}\n          notes={this.state.notes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}